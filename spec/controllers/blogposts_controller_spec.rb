
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe BlogpostsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Blogpost. As you add validations to Blogpost, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:blogpost) }

  let(:invalid_attributes) do
    FactoryGirl.attributes_for(:blogpost).merge(title: '')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BlogpostsController. Be sure to keep this updated too.
  let(:logged_in_user) { FactoryGirl.create :user }
  let(:valid_session) { { user_id: logged_in_user.id } }

  describe "GET #index" do
    it "returns a success response" do
      Blogpost.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      blogpost = Blogpost.create! valid_attributes
      get :show, params: {id: blogpost.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      blogpost = Blogpost.create! valid_attributes
      get :edit, params: {id: blogpost.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Blogpost" do
        expect {
          post :create, params: {blogpost: valid_attributes}, session: valid_session
        }.to change(Blogpost, :count).by(1)
      end

      it "redirects to the created blogpost" do
        post :create, params: {blogpost: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Blogpost.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {blogpost: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:blogpost)
      }

      it "updates the requested blogpost" do
        blogpost = Blogpost.create! valid_attributes
        put :update, params: {id: blogpost.to_param, blogpost: new_attributes}, session: valid_session
        blogpost.reload
        expect(blogpost.title).to eq(new_attributes[:title])
      end

      it "redirects to the blogpost" do
        blogpost = Blogpost.create! valid_attributes
        put :update, params: {id: blogpost.to_param, blogpost: valid_attributes}, session: valid_session
        expect(response).to redirect_to(blogpost)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        blogpost = Blogpost.create! valid_attributes
        put :update, params: {id: blogpost.to_param, blogpost: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested blogpost" do
      blogpost = Blogpost.create! valid_attributes
      expect {
        delete :destroy, params: {id: blogpost.to_param}, session: valid_session
      }.to change(Blogpost, :count).by(-1)
    end

    it "redirects to the blogposts list" do
      blogpost = Blogpost.create! valid_attributes
      delete :destroy, params: {id: blogpost.to_param}, session: valid_session
      expect(response).to redirect_to(blogposts_url)
    end
  end

end
